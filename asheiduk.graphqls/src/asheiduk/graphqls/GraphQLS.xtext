/*
 * Modelled according to the specifiaction at
 *
 * https://graphql.github.io/graphql-spec/June2018/#sec-Type-System
 *
 * Grammar ambiguities: 'type X { ... }' can be either a type WITHOUT any
 * fields followed by an anonymous query XOR a type WITH a FieldsDefinition.
 * Same thing for 'interface', 'input', 'schema' and 'enum'.
 * Since - at execution time of a query - no type shall be defined in that
 * document the most simple solution is to apply syntactic predicates ('->')
 * to the optional parts of the type definitions.
 */
grammar asheiduk.graphqls.GraphQLS hidden (WS, SL_COMMENT, COMMA)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// TODO: othe URI (?)
generate graphQLS "http://www.graphqls.asheiduk/GraphQLS"

// ------------------------------------------------------------------------
// -- Document
// ------------------------------------------------------------------------

Document:
	definitions += Definition+
;

Definition:
	ExecutableDefinition
	| TypeSystemDefinition
	| TypeSystemExtension
;

ExecutableDefinition:
	OperationDefinition
	| FragmentDefinition
;

TypeSystemDefinition:
	SchemaDefinition
	| TypeDefinition
	| DirectiveDefinition
;

TypeSystemExtension:
	SchemaExtension
	| TypeExtension
;

// ------------------------------------------------------------------------
// -- OperationDefinition
// ------------------------------------------------------------------------

OperationDefinition:
	operationType=OperationType Name? VariableDefinitions? Directives<const=false>? SelectionSet
	| SelectionSet
;

enum OperationType:
	query | mutation | subscription
;

fragment VariableDefinitions*:
	'(' variables += VariableDefinition+ ')'
;

VariableDefinition:
	'$' Name ':' TypeSpec DefaultValue?
;

fragment DefaultValue*:
	'=' defaultValue=Value<const=true>
;

// ------------------------------------------------------------------------
// -- FragmentDefinition
// ------------------------------------------------------------------------

FragmentDefinition:
	'fragment' FragmentName	TypeCondition Directives<const=false>? SelectionSet
;

fragment FragmentName*:
	name=ID	// TODO: Spec says: but not 'on'
;

fragment TypeCondition*:
	'on' typeCondition=[TypeDefinition]
;

// ------------------------------------------------------------------------

fragment SelectionSet*:
	'{' selectionSet += Selection+ '}'
;

Selection:
	Field
	| FragmentSpread
	| InlineFragment	// TODO: add predicate due to 'on' ambiguity -- which one?
;

Field:
	(alias=ID ':')? field=[FieldDefinition] Arguments<const=false>? Directives<const=false>? SelectionSet?
;

FragmentSpread:
	// TODO: Spec says for FragmentName: but not 'on'
	'...' ^fragment=[FragmentDefinition] Directives<const=false>?
;

InlineFragment:
	'...' TypeCondition? Directives<const=false>? SelectionSet
;

// ------------------------------------------------------------------------
// -- SchemaDefinition
// ------------------------------------------------------------------------

SchemaDefinition:
	'schema' Directives<const=true>? '{'
		rootOperations += RootOperationTypeDefinition+
	'}'
;

SchemaExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'schema' {SchemaExtension} Directives<const=true>? -> ('{'
		// TODO: Spec says OperationTypeDefinition but it seems to be the same
		rootOperations += RootOperationTypeDefinition+
	'}')?
;

RootOperationTypeDefinition:
	operationType=OperationType ':' type=NamedType
;

// ------------------------------------------------------------------------
// -- TypeDefinition / TypeExtension
// ------------------------------------------------------------------------

TypeDefinition:
	ScalarTypeDefinition
	| ObjectTypeDefinition
	| InterfaceTypeDefinition
	| UnionTypeDefinition
	| EnumTypeDefinition
	| InputObjectTypeDefinition
;

TypeExtension:
	ScalarTypeExtension
	| ObjectTypeExtension
	| InterfaceTypeExtension
	| UnionTypeExtension
	| EnumTypeExtension
	| InputObjectTypeExtension
;

// ------------------------------------------------------------------------

ScalarTypeDefinition:
	Description? 'scalar' Name Directives<const=true>?
;

ScalarTypeExtension:
	'extend' 'scalar' extends=[ScalarTypeDefinition] Directives<const=true>
;

// ------------------------------------------------------------------------

ObjectTypeDefinition:
	Description? 'type' Name ImplementsInterfaces? Directives<const=true>? -> FieldsDefinition?
;

ObjectTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'type' extends=[ObjectTypeDefinition] ImplementsInterfaces? Directives<const=true>? -> FieldsDefinition?
;

fragment ImplementsInterfaces*:
	'implements' '&'? implements += NamedType ( '&' implements += NamedType )*
;

InterfaceTypeDefinition:
	Description? 'interface' Name Directives<const=true>? -> FieldsDefinition?
;

InterfaceTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'interface' extends=[InterfaceTypeDefinition] Directives<const=true>? -> FieldsDefinition?
;

fragment FieldsDefinition*:
	'{'
		fields += FieldDefinition+
	'}'
;

FieldDefinition:
	Description? Name ArgumentsDefinition? ':' TypeSpec Directives<const=true>?
;

// ------------------------------------------------------------------------

UnionTypeDefinition:
	Description? 'union' Name Directives<const=true>? UnionMemberTypes?
;

UnionTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'union' extends=[UnionTypeDefinition] Directives<const=true>? UnionMemberTypes?
;

fragment UnionMemberTypes*:
	'=' '|'? members += NamedType ('|' members += NamedType)*
;

// ------------------------------------------------------------------------

EnumTypeDefinition:
	Description? 'enum' Name Directives<const=true>? -> EnumValuesDefinition?
;

EnumTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'enum' extends=[EnumTypeDefinition] Directives<const=true>? -> EnumValuesDefinition?
;

fragment EnumValuesDefinition*:
	'{'
		values += EnumValueDefinition+
	'}'
;

EnumValueDefinition:
	Description? Name Directives<const=true>?
;

// ------------------------------------------------------------------------

InputObjectTypeDefinition:
	Description? 'input' Name Directives<const=true>? -> InputFieldsDefinition?
;

InputObjectTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'input' extends=[InterfaceTypeDefinition] Directives<const=true>? -> InputFieldsDefinition?
;

fragment InputFieldsDefinition*:
	'{'
		fields += InputValueDefinition+
	'}'
;

fragment ArgumentsDefinition*:
	'(' arguments += InputValueDefinition+ ')'
;

InputValueDefinition:
	Description? Name ':' TypeSpec DefaultValue? Directives<const=true>?
;

// ------------------------------------------------------------------------

/* Strictly correct but produces a grammar error:
 * 
 * 	rule ruleType has non-LL(*) decision due to recursive rule invocations reachable from alts 2,3.  Resolve by left-factoring or using syntactic predicates or using backtrack=true option.
 * 
 * The recursion happens due to "NonNullType". 
 * 
Type:
	NamedType | ListType | NonNullType
;

NamedType:
	type=[TypeDefinition]
;

ListType:
	'[' itemType=Type ']'
;

NonNullType:
	type=(NamedType | ListType) '!' 
;
 */

NamedType:
	predefinedType=PredefinedScalar
	| type=[TypeDefinition]	// TODO: Scoping?
;

Type:
	NamedTypeWithNotNull | ListTypeWithNotNull
;

// TODO: perhaps these two special rules can be eliminated with left-factoring 
NamedTypeWithNotNull:
	(
		predefinedType=PredefinedScalar
		| type=[TypeDefinition]	// TODO: Scoping?
	)
	nonNull ?= '!'?	
;

ListTypeWithNotNull:
	'[' itemType=Type ']' nonNull ?= '!'?
;

// ------------------------------------------------------------------------
// -- DirectiveDefinition
// ------------------------------------------------------------------------

DirectiveDefinition:
	Description? 'directive' '@' Name ArgumentsDefinition?
	'on' '|'?  locations += DirectiveLocation ( '|' locations += DirectiveLocation)*
;

enum DirectiveLocation:
	// ExecutableDirectiveLocation
	QUERY | MUTATION | SUBSCRIPTION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT
	
	// TypeSystemDirectiveLocation
	| SCHEMA | SCALAR | OBJECT |FIELD_DEFINITION | ARGUMENT_DEFINITION
	| INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT
	| INPUT_FIELD_DEFINITION
;

// ------------------------------------------------------------------------

fragment Directives<const>*:
	directives += Directive<const>+
;

Directive<const>:
	// TODO: replace "name" with crossreference to prefined or user defined DirectiveDefinition
	'@' Name Arguments<const>?
;

fragment Arguments<const>*:
	'(' arguments += Argument<const>+ ')'	
;

Argument<const>:
	Name ':' value=Value<const>
;

// ------------------------------------------------------------------------

Value<const>:
	<!const> {Variable} '$' name=[VariableDefinition]
	| {IntValue} value=INT
	| {FloatValue} value=FLOAT
	| {StringValue} value=STRING
	| {BooleanValue} value=('true' | 'false') 
	| {NullValue} 'null'
	// TODO: ID -> [EnumValueDefinition]
	| {EnumValue} value=ID	// spec: but not 'true' or 'false' or 'null
	| {ListValue} '[' items += Value<const>* ']'
	| {ObjectValue} '{' fields += ObjectField<const>* '}'
;

ObjectField<const>:
	Name ':' value=Value<const>
;

// ------------------------------------------------------------------

enum PredefinedScalar:
	Int | Float | String | Boolean | ID
;

// ------------------------------------------------------------------
// -- Grammar-Fragments
// ------------------------------------------------------------------

fragment Description*: 
	description=STRING
;

fragment Name*:
	name=ID
;

fragment TypeSpec*:
	type=Type
;

// ------------------------------------------------------------------
// -- Semi-Terminals
// ------------------------------------------------------------------

ID:
	PLAIN_ID
	// Enums
	| 'ARGUMENT_DEFINITION'
	| 'ENUM'
	| 'ENUM_VALUE'
	| 'FIELD'
	| 'FIELD_DEFINITION'
	| 'FRAGMENT_DEFINITION'
	| 'FRAGMENT_SPREAD'
	| 'INLINE_FRAGMENT'
	| 'INPUT_FIELD_DEFINITION'
	| 'INPUT_OBJECT'
	| 'INTERFACE'
	| 'MUTATION'
	| 'OBJECT'
	| 'QUERY'
	| 'SCALAR'
	| 'SCHEMA'
	| 'SUBSCRIPTION'
	| 'UNION'
	// types
	| 'directive'
	| 'enum'
	| 'input'
	| 'interface'
	| 'scalar'
	| 'schema'
	| 'type'
	| 'union'
	// type-related
	| 'extend'
	| 'implements'
	| 'mutation'
//	| 'on'
	| 'query'
	| 'subscription'
	// other keywords
	| 'fragment'
//	| 'null'
//	| 'false'
//	| 'true'
;

// ------------------------------------------------------------------
// -- Terminals
// ------------------------------------------------------------------

terminal INT returns ecore::EInt:
	INTEGER_PART;

terminal FLOAT returns ecore::EDouble:	// Really! See §3.5.2 - it is a double but called "Float"!
	INTEGER_PART FRACTIONAL_PART
	| INTEGER_PART EXPONENT_PART
	| INTEGER_PART FRACTIONAL_PART EXPONENT_PART;

terminal fragment INTEGER_PART:
	'-'? '0' | '-'? '1'..'9' '0'..'9'*;

terminal fragment FRACTIONAL_PART:
	'.' '0'..'9'+;

terminal fragment EXPONENT_PART:
	('e' | 'E') ('+' | '-')? '0'..'9'+;

// TODO: align with spec
terminal STRING:
	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
	| '"""' -> '"""';

terminal PLAIN_ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

// -- hidden tokens

terminal SL_COMMENT : '#' !('\n'|'\r')* ('\r'? '\n')?;

terminal COMMA: ',';

terminal WS: (' '|'\t'|'\r'|'\n')+;

// terminal ANY_OTHER: .;
