/*
 * Modelled according to the specifiaction at
 *
 * https://graphql.github.io/graphql-spec/June2018/#sec-Type-System
 */
grammar asheiduk.graphqls.GraphQLS hidden (WS, SL_COMMENT, COMMA)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// TODO: othe URI (?)
generate graphQLS "http://www.graphqls.asheiduk/GraphQLS"

// TODO: ExecutableDefinition?
Document:
	definitions += Definition+
;

Definition:
	TypeSystemDefinition
	| TypeSystemExtension
;

TypeSystemDefinition:
	SchemaDefinition
	| TypeDefinition
	| DirectiveDefinition
;

TypeSystemExtension:
	SchemaExtension
	| TypeExtension
;

// ------------------------------------------------------------------------
// -- SchemaDefinition
// ------------------------------------------------------------------------

SchemaDefinition:
	'schema' Directives? '{'
		rootOperations += RootOperationTypeDefinition+
	'}'
;

SchemaExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'schema' {SchemaExtension} Directives? ('{'
		// TODO: Spec says OperationTypeDefinition but it seems to be the same
		rootOperations += RootOperationTypeDefinition+
	'}')?
;

RootOperationTypeDefinition:
	operationType=OperationType ':' type=NamedType
;

enum OperationType:
	query | mutation | subscription
;

// ------------------------------------------------------------------------
// -- TypeDefinition / TypeExtension
// ------------------------------------------------------------------------

TypeDefinition:
	ScalarTypeDefinition
	| ObjectTypeDefinition
	| InterfaceTypeDefinition
	| UnionTypeDefinition
	| EnumTypeDefinition
	| InputObjectTypeDefinition
;

TypeExtension:
	ScalarTypeExtension
	| ObjectTypeExtension
	| InterfaceTypeExtension
	| UnionTypeExtension
	| EnumTypeExtension
	| InputObjectTypeExtension
;

// ------------------------------------------------------------------------

ScalarTypeDefinition:
	Description 'scalar' name=ID Directives?
;

ScalarTypeExtension:
	'extend' 'scalar' extends=[ScalarTypeDefinition] Directives
;

// ------------------------------------------------------------------------

ObjectTypeDefinition:
	Description 'type' name=ID ImplementsInterfaces? Directives? FieldsDefinition?
;

ObjectTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'type' extends=[ObjectTypeDefinition] ImplementsInterfaces? Directives? FieldsDefinition?
;

fragment ImplementsInterfaces*:
	'implements' '&'? implements += NamedType ( '&' implements += NamedType )*
;

InterfaceTypeDefinition:
	Description 'interface' name=ID Directives? FieldsDefinition?
;

InterfaceTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'interface' extends=[InterfaceTypeDefinition] Directives? FieldsDefinition?
;

fragment FieldsDefinition*:
	'{'
		fields += FieldDefinition+
	'}'
;

FieldDefinition:
	Description	name=ID Arguments? ':' TypeSpec Directives?
;

// ------------------------------------------------------------------------

UnionTypeDefinition:
	Description 'union' name=ID Directives? UnionMemberTypes?
;

UnionTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'union' extends=[UnionTypeDefinition] Directives? UnionMemberTypes?
;

fragment UnionMemberTypes*:
	'=' '|'? members += NamedType ('|' members += NamedType)*
;

// ------------------------------------------------------------------------

EnumTypeDefinition:
	Description 'enum' name=ID Directives? EnumValuesDefinition?
;

EnumTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'enum' extends=[EnumTypeDefinition] Directives? EnumValuesDefinition?
;

fragment EnumValuesDefinition*:
	'{'
		values += EnumValueDefinition+
	'}'
;

EnumValueDefinition:
	Description name=ID Directives?
;

// ------------------------------------------------------------------------

InputObjectTypeDefinition:
	Description 'input' name=ID Directives? InputFieldsDefinition?
;

InputObjectTypeExtension:
	// TODO: spec is more concise -- additional check required
	'extend' 'input' extends=[InterfaceTypeDefinition] Directives? InputFieldsDefinition?
;

fragment InputFieldsDefinition*:
	'{'
		fields += InputValueDefinition+
	'}'
;

InputValueDefinition:
	Description name=ID ':' TypeSpec ('=' defaultValue=Value)? Directives?
;

// ------------------------------------------------------------------------

/* Strictly correct but produces a grammar error:
 * 
 * 	rule ruleType has non-LL(*) decision due to recursive rule invocations reachable from alts 2,3.  Resolve by left-factoring or using syntactic predicates or using backtrack=true option.
 * 
 * The recursion happens due to "NonNullType". 
 * 
Type:
	NamedType | ListType | NonNullType
;

NamedType:
	type=[TypeDefinition]
;

ListType:
	'[' itemType=Type ']'
;

NonNullType:
	type=(NamedType | ListType) '!' 
;
 */

NamedType:
	predefinedType=PredefinedScalar
	| type=[TypeDefinition]	// TODO: Scoping?
;

Type:
	NamedTypeWithNotNull | ListTypeWithNotNull
;

// TODO: perhaps these two special rules can be eliminated with left-factoring 
NamedTypeWithNotNull:
	(
		predefinedType=PredefinedScalar
		| type=[TypeDefinition]	// TODO: Scoping?
	)
	nonNull ?= '!'?	
;

ListTypeWithNotNull:
	'[' itemType=Type ']' nonNull ?= '!'?
;

// ------------------------------------------------------------------------
// -- DirectiveDefinition
// ------------------------------------------------------------------------

DirectiveDefinition:
	Description 'directive' '@' name=ID Arguments?
	'on''|'?  locations += DirectiveLocation ( '|' locations += DirectiveLocation)*
;

enum DirectiveLocation:
	// ExecutableDirectiveLocation
	QUERY | MUTATION | SUBSCRIPTION | FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT
	
	// TypeSystemDirectiveLocation
	| SCHEMA | SCALAR | OBJECT |FIELD_DEFINITION | ARGUMENT_DEFINITION
	| INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT
	| INPUT_FIELD_DEFINITION
;

// ------------------------------------------------------------------------

Directive:
	// TODO: replace "name" with crossreference to prefined or user defined DirectiveDefinition
	'@' name=ID ( '(' arguments += Argument+ ')' )?
;

Argument:
	name=ID ':' value=Value
;

// ------------------------------------------------------------------------

ArgumentDefinition:
	Description name=ID ':' TypeSpec ('=' defaultValue=Value)? Directives?
;

Value:
//	Variable	// TODO
	{IntValue} value=INT
	| {FloatValue} value=FLOAT
	| {StringValue} value=STRING
	| {BooleanValue} value=('true' | 'false') 
	| {NullValue} 'null'
//	| EnumValue	// TODO
	| {ListValue} '[' items += Value* ']'
	| {ObjectValue} '{' fields += ObjectField* '}'
;

ObjectField:
	name=ID ':' value=Value
;

// ------------------------------------------------------------------

enum PredefinedScalar:
	Int | Float | String | Boolean | ID
;

// ------------------------------------------------------------------
// -- Grammar-Fragments
// ------------------------------------------------------------------

fragment Description*: 
	description=STRING?
;

fragment Directives*:
	directives += Directive+
;

fragment TypeSpec*:
	type=Type
;

fragment Arguments*:
	'(' arguments += ArgumentDefinition+ ')'	
;

// ------------------------------------------------------------------
// -- Semi-Terminals
// ------------------------------------------------------------------

ID:
	PLAIN_ID
	| 'input'
	| 'type'
	// TODO: other keywords
;

// ------------------------------------------------------------------
// -- Terminals
// ------------------------------------------------------------------

terminal INT returns ecore::EInt:
	INTEGER_PART;

terminal FLOAT returns ecore::EDouble:	// Really! See ยง3.5.2 - it is a double but called "Float"!
	INTEGER_PART FRACTIONAL_PART
	| INTEGER_PART EXPONENT_PART
	| INTEGER_PART FRACTIONAL_PART EXPONENT_PART;

terminal fragment INTEGER_PART:
	'-'? '0' | '-'? '1'..'9' '0'..'9'*;

terminal fragment FRACTIONAL_PART:
	'.' '0'..'9'+;

terminal fragment EXPONENT_PART:
	('e' | 'E') ('+' | '-')? '0'..'9'+;

// TODO: align with spec
terminal STRING:
	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
	| '"""' -> '"""';

terminal PLAIN_ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

// -- hidden tokens

terminal SL_COMMENT : '#' !('\n'|'\r')* ('\r'? '\n')?;

terminal COMMA: ',';

terminal WS: (' '|'\t'|'\r'|'\n')+;

// terminal ANY_OTHER: .;
